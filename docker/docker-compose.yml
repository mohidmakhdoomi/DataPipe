services:
  # Base image (built first)
  base:
    build:
      context: ./base
      dockerfile: Dockerfile
    image: data-pipeline/base:latest
    command: ["echo", "Base image built successfully"]

  # PostgreSQL for transactional data
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
      POSTGRES_DB: ${POSTGRES_DB:-transactions_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ClickHouse for real-time analytics
  clickhouse:
    build:
      context: ..
      dockerfile: docker/clickhouse/Dockerfile
    depends_on:
      - kafka
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-analytics}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-analytics_user}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:?CLICKHOUSE_PASSWORD must be set}
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_logs:/var/log/clickhouse-server
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Generator Service
  data-generator:
    build:
      context: ..
      dockerfile: docker/data-generator/Dockerfile
    depends_on:
      - base
      - postgres
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-transactions_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
      NUM_USERS: 1000
      NUM_PRODUCTS: 500
      DAYS_OF_DATA: 30
    volumes:
      - data_output:/app/output
    command: ["python", "generator.py", "--users", "1000", "--products", "500", "--days", "30"]

  # Kafka Tools (Producers/Consumers)
  kafka-tools:
    build:
      context: ..
      dockerfile: docker/kafka-tools/Dockerfile
    depends_on:
      - base
      - kafka
      - data-generator
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      BATCH_SIZE: 100
      INTERVAL_SECONDS: 60
    volumes:
      - data_output:/app/data:ro

  # dbt for transformations
  dbt:
    build:
      context: ..
      dockerfile: docker/dbt/Dockerfile
    depends_on:
      - base
      - postgres
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-transactions_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
    volumes:
      - dbt_output:/app/dbt_project/target
    command: ["dbt", "debug"]

  # Airflow components
  airflow-init:
    build:
      context: ..
      dockerfile: docker/airflow/Dockerfile
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}@postgres/${POSTGRES_DB:-transactions_db}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY:?AIRFLOW_FERNET_KEY must be set}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY:?AIRFLOW_SECRET_KEY must be set}
    command: >
      bash -c "
        airflow db migrate &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin &&
        airflow connections create-default-connections &&
        airflow connections delete postgres_default || true &&        
        airflow connections add postgres_default --conn-type postgres --conn-host postgres --conn-login ${POSTGRES_USER:-postgres} --conn-password ${POSTGRES_PASSWORD} --conn-schema ${POSTGRES_DB:-transactions_db} --conn-port 5432        
      "

  airflow-webserver:
    build:
      context: ..
      dockerfile: docker/airflow/Dockerfile
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}@postgres/${POSTGRES_DB:-transactions_db}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY:?AIRFLOW_FERNET_KEY must be set}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY:?AIRFLOW_SECRET_KEY must be set}
    ports:
      - "8080:8080"
    volumes:
      - airflow_logs:/opt/airflow/logs
    command: airflow webserver

  airflow-scheduler:
    build:
      context: ..
      dockerfile: docker/airflow/Dockerfile
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}@postgres/${POSTGRES_DB:-transactions_db}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY:?AIRFLOW_FERNET_KEY must be set}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY:?AIRFLOW_SECRET_KEY must be set}
    volumes:
      - airflow_logs:/opt/airflow/logs
    command: airflow scheduler

volumes:
  postgres_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  clickhouse_data:
  clickhouse_logs:
  data_output:
  dbt_output:
  airflow_logs:

networks:
  default:
    name: data-pipeline-network