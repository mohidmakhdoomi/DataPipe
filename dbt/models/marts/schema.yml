version: 2

models:
  - name: dim_users
    description: "User dimension table with comprehensive customer analytics and segmentation"
    columns:
      - name: user_id
        description: "Unique identifier for users"
        tests:
          - unique
          - not_null
      - name: email
        description: "User email address"
        tests:
          - unique
          - not_null
      - name: customer_segment
        description: "RFM-based customer segmentation"
        tests:
          - accepted_values:
              values: ['champions', 'loyal_customers', 'new_customers', 'potential_loyalists', 
                      'promising', 'need_attention', 'about_to_sleep', 'at_risk', 
                      'cannot_lose_them', 'hibernating', 'lost']
      - name: rfm_total_score
        description: "Combined RFM score (3-15 scale)"
        tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 15
      - name: total_revenue
        description: "Total revenue generated by user"
        tests:
          - dbt_utils.accepted_range:
              min_value: 0
      - name: engagement_score
        description: "User engagement score (0-100)"
        tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 100

  - name: fact_transactions
    description: "Transaction fact table with enriched dimensions and business metrics"
    columns:
      - name: transaction_id
        description: "Unique identifier for transactions"
        tests:
          - unique
          - not_null
      - name: user_id
        description: "Reference to user dimension"
        tests:
          - not_null
          - relationships:
              to: ref('dim_users')
              field: user_id
      - name: recognized_revenue
        description: "Revenue recognized from successful transactions"
        tests:
          - dbt_utils.accepted_range:
              min_value: 0
      - name: is_successful
        description: "Boolean flag for successful transactions"
        tests:
          - accepted_values:
              values: [true, false]

  - name: mart_business_metrics
    description: "Comprehensive business metrics aggregated by different dimensions"
    columns:
      - name: metric_type
        description: "Type of metric (daily_metrics, customer_segments, etc.)"
        tests:
          - not_null
          - accepted_values:
              values: ['daily_metrics', 'customer_segments', 'product_categories', 'user_tiers', 'key_metrics']
      - name: metric_key
        description: "Key for the specific metric instance"
        tests:
          - not_null
      - name: metric_values
        description: "JSON object containing metric values"
        tests:
          - not_null

tests:
  - name: revenue_consistency_check
    description: "Ensure total revenue in dim_users matches fact_transactions"
    sql: |
      select 
        abs(
          (select sum(total_revenue) from {{ ref('dim_users') }}) -
          (select sum(recognized_revenue) from {{ ref('fact_transactions') }})
        ) as revenue_difference
      having revenue_difference > 1  -- Allow for small rounding differences

  - name: customer_count_consistency
    description: "Ensure customer counts are consistent across tables"
    sql: |
      select 
        abs(
          (select count(distinct user_id) from {{ ref('dim_users') }}) -
          (select count(distinct user_id) from {{ ref('fact_transactions') }})
        ) as customer_difference
      having customer_difference > 0

  - name: no_negative_metrics
    description: "Ensure no negative values in key business metrics"
    sql: |
      select count(*) as negative_count
      from {{ ref('dim_users') }}
      where total_revenue < 0 
         or total_transactions < 0 
         or successful_transactions < 0
      having negative_count > 0