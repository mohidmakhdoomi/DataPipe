apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: data-ingestion
  labels:
    app: postgresql
    component: database
spec:
  serviceName: postgresql-headless
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
      component: database
  template:
    metadata:
      labels:
        app: postgresql
        component: database
    spec:
      serviceAccountName: postgresql-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: postgresql
        image: postgres:15-alpine
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # PostgreSQL needs write access to data directory
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
            - ALL
        env:
        - name: POSTGRES_DB
          value: "postgres"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        - name: POSTGRES_INITDB_ARGS
          value: "--data-checksums"
        command:
        - /bin/bash
        - -c
        - |
          # Start PostgreSQL with custom configuration
          exec docker-entrypoint.sh postgres -c config_file=/etc/postgresql/postgresql.conf
        ports:
        - name: postgresql
          containerPort: 5432
          protocol: TCP
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1"
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d/init-schema.sql
          subPath: init-schema.sql
        - name: tmp
          mountPath: /tmp
        - name: run
          mountPath: /var/run/postgresql
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
      - name: init-scripts
        configMap:
          name: postgresql-config
      - name: tmp
        emptyDir: {}
      - name: run
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
      labels:
        app: postgresql
        component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: standard
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-headless
  namespace: data-ingestion
  labels:
    app: postgresql
    component: database
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgresql
    component: database
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: data-ingestion
  labels:
    app: postgresql
    component: database
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgresql
    component: database