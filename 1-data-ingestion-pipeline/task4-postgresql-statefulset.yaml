apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: data-ingestion
  labels:
    app: postgresql
    component: database
data:
  postgresql.conf: |
    include '/var/lib/postgresql/data/pgdata/postgresql.conf'
    
    # Memory Configuration (optimized for 1GB allocation)
    shared_buffers = 256MB
    effective_cache_size = 512MB
    work_mem = 4MB
    maintenance_work_mem = 64MB
    
    # Connection Configuration
    listen_addresses = '*'
    max_connections = 100
    
    # WAL Configuration for CDC - INCREASED for 4 instances
    wal_level = logical
    max_wal_senders = 8
    max_replication_slots = 8
    max_logical_replication_workers = 8
    
    # Performance Tuning
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging Configuration
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'mod'
    log_min_duration_statement = 1000
    
    # Replication Configuration - INCREASED for multiple slots
    hot_standby = on
    wal_keep_size = 2GB
    max_slot_wal_keep_size = 4GB
    
    # WAL Archiving Configuration (Task 14: Backup and Recovery)
    archive_mode = on
    archive_command = 'test ! -f /var/lib/postgresql/wal_archive/%f && cp %p /var/lib/postgresql/wal_archive/%f'
    archive_timeout = 900  # 15 minutes (Claude's recommendation)
  
  init-schema.sql: |
    -- Create database for e-commerce
    CREATE DATABASE ecommerce;
    
    -- Connect to ecommerce database
    \c ecommerce;
    
    -- Create users table
    CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        first_name VARCHAR(100) NOT NULL,
        last_name VARCHAR(100) NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    ALTER TABLE users REPLICA IDENTITY FULL;
    
    -- Create products table
    CREATE TABLE products (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        price DECIMAL(10,2) NOT NULL CHECK (price >= 0),
        stock_quantity INTEGER DEFAULT 0 CHECK (stock_quantity >= 0),
        category VARCHAR(100),
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    ALTER TABLE products REPLICA IDENTITY FULL;
    
    -- Create orders table
    CREATE TABLE orders (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        status VARCHAR(50) DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'shipped', 'delivered', 'cancelled')),
        total_amount DECIMAL(10,2) NOT NULL CHECK (total_amount >= 0),
        shipping_address TEXT,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );
    ALTER TABLE orders REPLICA IDENTITY FULL;
    
    -- Create order_items table
    CREATE TABLE order_items (
        id SERIAL PRIMARY KEY,
        order_id INTEGER NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
        product_id INTEGER NOT NULL REFERENCES products(id) ON DELETE CASCADE,
        quantity INTEGER NOT NULL CHECK (quantity > 0),
        unit_price DECIMAL(10,2) NOT NULL CHECK (unit_price >= 0),
        created_at TIMESTAMP DEFAULT NOW()
    );
    ALTER TABLE order_items REPLICA IDENTITY FULL;
    
    -- Create indexes for performance
    CREATE INDEX idx_users_email ON users(email);
    CREATE INDEX idx_products_category ON products(category);
    CREATE INDEX idx_products_price ON products(price);
    CREATE INDEX idx_orders_user_id ON orders(user_id);
    CREATE INDEX idx_orders_status ON orders(status);
    CREATE INDEX idx_orders_created_at ON orders(created_at);
    CREATE INDEX idx_order_items_order_id ON order_items(order_id);
    CREATE INDEX idx_order_items_product_id ON order_items(product_id);
    
    -- Create debezium_parent role for CDC
    CREATE ROLE debezium_parent WITH REPLICATION NOLOGIN;
    GRANT CONNECT ON DATABASE ecommerce TO debezium_parent;
    GRANT USAGE ON SCHEMA public TO debezium_parent;
    GRANT SELECT ON ALL TABLES IN SCHEMA public TO debezium_parent;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO debezium_parent;
    
    -- Create separate publications for each table
    CREATE PUBLICATION dbz_publication_users FOR TABLE users;
    CREATE PUBLICATION dbz_publication_products FOR TABLE products;
    CREATE PUBLICATION dbz_publication_orders FOR TABLE orders;
    CREATE PUBLICATION dbz_publication_order_items FOR TABLE order_items;
    
    -- Create function to update updated_at timestamp
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
    END;
    $$ language 'plpgsql';
    
    -- Create triggers for updated_at
    CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    
    CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    
    CREATE TRIGGER update_orders_updated_at BEFORE UPDATE ON orders
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: data-ingestion
  labels:
    app: postgresql
    component: database
spec:
  serviceName: postgresql-headless
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
      component: database
  template:
    metadata:
      labels:
        app: postgresql
        component: database
    spec:
      serviceAccountName: postgresql-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 70
        runAsGroup: 70
        fsGroup: 70
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
      # Fix permissions before PostgreSQL starts
      initContainers:
      - name: fix-permissions
        image: busybox:1.36
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          runAsNonRoot: false
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
            add: ["CHOWN", "FOWNER", "DAC_OVERRIDE"]
        command: ['sh', '-c']
        args:
        - |
          # Create and set ownership atomically
          mkdir -p /var/run/postgresql
          chown -R 70:70 /var/run/postgresql
          chmod 2775 /var/run/postgresql  # SetGID bit ensures consistent group
          
          # Verify permissions (fail fast if incorrect)
          stat -c "%u:%g %a" /var/run/postgresql | grep -q "70:70 2775" || exit 1
          echo "PostgreSQL runtime directory permissions fixed"

          cp /tmp/init-schema.sql /docker-entrypoint-initdb.d/init-schema.sql
          echo "CREATE USER $DBZ_DB_USERNAME WITH REPLICATION PASSWORD '$DBZ_DB_PASSWORD' IN ROLE debezium_parent; ALTER ROLE $DBZ_DB_USERNAME SET ROLE debezium_parent;" >> /docker-entrypoint-initdb.d/init-schema.sql
          echo "PostgreSQL Debezium user created for multi-instance setup"
        env:
        - name: DBZ_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: debezium-credentials
              key: db-username
        - name: DBZ_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: debezium-credentials
              key: db-password
        volumeMounts:
        - name: run
          mountPath: /var/run/postgresql
        - name: tmp
          mountPath: /tmp
        - name: init-scripts
          mountPath: /tmp/init-schema.sql
          subPath: init-schema.sql
          readOnly: true
        - name: modified-scripts
          mountPath: /docker-entrypoint-initdb.d
      containers:
      - name: postgresql
        image: postgres:15-alpine
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # PostgreSQL needs write access to data directory
          runAsNonRoot: true
          runAsUser: 70
          runAsGroup: 70
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop: ["ALL"]
        env:
        - name: POSTGRES_DB
          value: "postgres"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        - name: POSTGRES_INITDB_ARGS
          value: "--data-checksums"
        args:
        - "-c"
        - "config_file=/etc/postgresql/postgresql.conf"
        ports:
        - name: postgresql
          containerPort: 5432
          protocol: TCP
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1"
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: run
          mountPath: /var/run/postgresql
        - name: modified-scripts
          mountPath: /docker-entrypoint-initdb.d/init-schema.sql
          subPath: init-schema.sql
          readOnly: true
        - name: wal-archive
          mountPath: /var/lib/postgresql/wal_archive
          subPath: init-schema.sql
          readOnly: true
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
      - name: init-scripts
        configMap:
          name: postgresql-config
      - name: tmp
        emptyDir: {}
      - name: run
        emptyDir: {}
      - name: modified-scripts
        emptyDir: {}
      - name: wal-archive
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
      labels:
        app: postgresql
        component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: database-local-path
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-headless
  namespace: data-ingestion
  labels:
    app: postgresql
    component: database
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgresql
    component: database
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: data-ingestion
  labels:
    app: postgresql
    component: database
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgresql
    component: database
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-nodeport
  namespace: data-ingestion
  labels:
    app: postgresql
    component: database
  annotations:
    description: "NodePort service for PostgreSQL - DEV ONLY"
spec:
  type: NodePort
  selector:
    app: postgresql
    component: database
  ports:
  - name: postgresql
    protocol: TCP
    port: 5432
    targetPort: 5432
    nodePort: 30432  # Maps to kind-config.yaml hostPort: 5432